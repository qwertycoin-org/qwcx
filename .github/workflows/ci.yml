name: "CI"

on:
  push:
    branches:
      - master

env:
  PROJECT_BUILD_DIR: "/tmp/build_dir"
  PROJECT_DISPLAY_NAME: "QWCX"
  QT_VERSION: 5.14.1

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
              name: "Android (multiabi)",
              os: "ubuntu-16.04",
              commands: {
                bootstrap: bash scripts/ci/linux_android.sh,
                configure: 'cmake
                  -DCMAKE_BUILD_TYPE=Release
                  -DCMAKE_FIND_ROOT_PATH=$PROJECT_BUILD_DIR/Qt5/$QT_VERSION/android
                  -DCMAKE_PROGRAM_PATH=$PROJECT_BUILD_DIR/Qt5/$QT_VERSION/android/bin
                  -DCMAKE_TOOLCHAIN_FILE=$HOME/.android/sdk/ndk/21.0.6113669/build/cmake/android.toolchain.cmake
                  -DANDROID_ABI:STRING=x86
                  -DANDROID_BUILD_ABI_arm64-v8a:BOOL=ON
                  -DANDROID_BUILD_ABI_armeabi-v7a:BOOL=ON
                  -DANDROID_BUILD_ABI_x86:BOOL=ON
                  -DANDROID_BUILD_ABI_x86_64:BOOL=OFF
                  -DANDROID_NATIVE_API_LEVEL:STRING=21
                  -DANDROID_NDK=$HOME/.android/sdk/ndk/21.0.6113669
                  -DANDROID_PLATFORM=android-21
                  -DANDROID_SDK=$HOME/.android/sdk
                  -DANDROID_SDK_PLATFORM=android-21
                  -DANDROID_STL=c++_shared
                  -DANDROID_TOOLCHAIN=clang
                  -DQT5_DOWNLOAD_VERSION=$QT_VERSION
                  -B $PROJECT_BUILD_DIR
                  -S $GITHUB_WORKSPACE',
                build: cmake --build . --config Release --target all,
                check: ctest -C Release,
                deploy: cmake --build . --config Release --target package
              }
          }
          - {
              name: "Linux (64-bit)",
              os: "ubuntu-16.04",
              commands: {
                bootstrap: bash scripts/ci/linux.sh,
                configure: 'cmake
                  -DCMAKE_BUILD_TYPE=Release
                  -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/cmake/polly/gcc-5-cxx14-c11.cmake
                  -DQT5_DOWNLOAD_VERSION=$QT_VERSION
                  -B $PROJECT_BUILD_DIR
                  -S $GITHUB_WORKSPACE',
                build: cmake --build . --config Release --target all,
                check: ctest -C Release,
                deploy: cmake --build . --config Release --target package
              }
          }
          - {
              name: "macOS (64-bit)",
              os: "macos-latest",
              commands: {
                bootstrap: echo "Skipped.",
                configure: 'cmake
                  -DCMAKE_BUILD_TYPE=Release
                  -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/cmake/polly/clang-cxx14.cmake
                  -DQT5_DOWNLOAD_VERSION=$QT_VERSION
                  -B $PROJECT_BUILD_DIR
                  -S $GITHUB_WORKSPACE',
                build: cmake --build . --config Release --target all,
                check: ctest -C Release,
                deploy: cmake --build . --config Release --target package
              }
          }
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Checkout Submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git_args="-c protocol.version=2 submodule update --init --force --recursive --depth=1"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" $git_args
      - name: Bootstrap (Install Dependencies)
        run: ${{ matrix.config.commands.bootstrap }}
      - name: Configure
        run: ${{ matrix.config.commands.configure }}
      - name: Build
        run: ${{ matrix.config.commands.build }}
        working-directory: ${{ env.PROJECT_BUILD_DIR }}
      - name: Check
        run: ${{ matrix.config.commands.check }}
        working-directory: ${{ env.PROJECT_BUILD_DIR }}
      - name: Deploy (create package)
        run: ${{ matrix.config.commands.deploy }}
        working-directory: ${{ env.PROJECT_BUILD_DIR }}
      - name: Upload Artifacts
        if: success()
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.PROJECT_DISPLAY_NAME }}-${{ github.sha }}-${{ github.run_id }}
          path: ${{ env.PROJECT_BUILD_DIR }}/dist
  publish:
    name: Write Release Draft
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.PROJECT_DISPLAY_NAME }}-${{ github.sha }}-${{ github.run_id }}
          path: /tmp/artifacts
      - name: Compress Artifacts
        env:
          OUTPWD: "/tmp/artifacts_compressed"
        run: |
          mkdir $OUTPWD
          cd /tmp/artifacts
          find . -type f -iname "$PROJECT_DISPLAY_NAME-*" -exec zip -r $OUTPWD/{}.zip ./{} \;
          ls -la $OUTPWD
      - name: Create Release Metadata
        id: create_release_metadata
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          version_file="/tmp/artifacts/version.txt"
          version_from_file="$(head -n 1 $version_file)"

          changelog_file="/tmp/artifacts/changelog-${version_from_file}.md"

          echo "" >> $changelog_file
          echo "###### Based on ${COMMIT_SHA::8}." >> $changelog_file

          changelog_from_file="$(cat $changelog_file)"
          changelog_from_file="${changelog_from_file//'%'/'%25'}"
          changelog_from_file="${changelog_from_file//$'\n'/'%0A'}"
          changelog_from_file="${changelog_from_file//$'\r'/'%0D'}"

          echo "::set-output name=tag_name::v${version_from_file}"
          echo "::set-output name=release_name::$PROJECT_DISPLAY_NAME v${version_from_file}"
          echo "::set-output name=body::${changelog_from_file}"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_release_metadata.outputs.tag_name }}
          release_name: ${{ steps.create_release_metadata.outputs.release_name }}
          body: ${{ steps.create_release_metadata.outputs.body }}
          draft: true
          prerelease: true
      - name: Upload Compressed Artifacts to Release
        shell: python
        env:
          GITHUB_AUTH_HEADER: "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
          GITHUB_CONTENT_HEADER: "Content-Type: application/zip"
          GITHUB_UPLOAD_URL: "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets"
        run: |
          # Python script that uploads assets to GitHub Releases
          import glob
          import os
          import subprocess
          import time
          project_display_name=os.getenv('PROJECT_DISPLAY_NAME', '')
          assets = glob.glob("/tmp/artifacts_compressed/{}-*.zip".format(project_display_name))
          for asset in assets:
              filepath = asset
              filename = os.path.basename(filepath)
              curl_cmd = [
                  'curl',
                  '--data-binary', '@{}'.format(filepath),
                  '-H', os.getenv('GITHUB_AUTH_HEADER', ''),
                  '-H', os.getenv('GITHUB_CONTENT_HEADER', ''),
                  '{}?name={}'.format(os.getenv('GITHUB_UPLOAD_URL', ''), filename)
              ]
              response = subprocess.check_output(curl_cmd)
              print(response)
              time.sleep(5)
